autoload -Uz compinit promptinit
compinit
promptinit
zstyle ':completion:*' menu select

alias vim="nvim"
alias ls="ls --color=auto"
alias ll="ls -la"
alias la="ls -a"
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
export LD_LIBRARY_PATH=/usr/local/lib

typeset -U path PATH
path=(~/.cargo/bin ~/.config/scripts $path)
export PATH

export EDITOR="/bin/nvim"

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

# ignore XON and XOFF Protocol (Ctrl S / Q)
stty -ixon

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"
key[Control-Left]="${terminfo[kLFT5]}"
key[Control-Right]="${terminfo[kRIT5]}"

[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete
[[ -n "${key[Control-Left]}"  ]] && bindkey -- "${key[Control-Left]}"  backward-word
[[ -n "${key[Control-Right]}" ]] && bindkey -- "${key[Control-Right]}" forward-word

bindkey -v


########## Autoload ##########
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

######### Promt ##########
RPS1='[%F{3}%?%f]'
if [[ -n "$SSH_CONNECTION" ]]; then
    PS1='%(!.%F{red}.%F{green})%n%f@%F{5}%m %F{4}%B%~%b%f $ '
else
    PS1='%(!.%F{red}.%F{green})%n %F{4}%B%~%b%f $ '
fi

if command -v oh-my-posh &> /dev/null; then
    eval "$(oh-my-posh init zsh --config ~/.config/oh-my-posh.toml)"
fi

########## Tmux sessionizer #########
if [ -d ~/$(tmux display-message -p '#S') ] && [ -n "$TMUX" ]; then
cd ~/$(tmux display-message -p '#S')
fi

########## syntax highlight ##########
PLUGIN_PATH=$HOME/.zshpl
if [ ! -d $PLUGIN_PATH ]; then
    mkdir ~/.zshpl
fi
# Declare the variable
typeset -A ZSH_HIGHLIGHT_STYLES

# To have paths colored instead of underlined
ZSH_HIGHLIGHT_STYLES[path]='fg=magenta'

# To disable highlighting of globbing expressions
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=cyan'

if [ ! -d $PLUGIN_PATH/syntax-highlighting ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $PLUGIN_PATH/syntax-highlighting
fi

source $PLUGIN_PATH/syntax-highlighting/zsh-syntax-highlighting.zsh

eval "$(atuin init zsh)"
